[general]
library_name = "libllvm[]"
output_file_path = "../lib/libLLVM_h.jl"
prologue_file_path = "./missing_defs.jl"
epilogue_file_path = ""
use_julia_native_enum_type = false
use_deterministic_symbol = true
printer_blacklist = [
    "LLVM_C_STRICT_PROTOTYPES_END",
    "LLVM_NATIVE_ARCH",
    "LLVMInitializeAllTargetInfos",
    "LLVMInitializeAllTargets",
    "LLVMInitializeAllTargetMCs",
    "LLVMInitializeAllAsmPrinters",
    "LLVMInitializeAllAsmParsers",
    "LLVMInitializeAllDisassemblers",
    "LLVMInitializeNativeTarget",
    "LLVMInitializeNativeAsmPrinter",
    "LLVMInitializeNativeAsmParser",
    "LLVMInitializeNativeDisassembler",
    "LLVM_C_EXTERN_C_BEGIN",
    "LLVM_C_EXTERN_C_END",
    "HUGE_VALF",
]

# if set to "raw", extract and dump raw c comment;
# if set to "doxygen", parse and format doxygen comment.
# note: by default, Clang only parses doxygen comment, pass `-fparse-all-comments` to Clang in order to parse non-doxygen comments.
extract_c_comment_style = "doxygen"

# if set to true, single line comment will be printed as """comment""" instead of """\ncomment\n"""
fold_single_line_comment = false

# if set to "outofline", documentation of struct fields will be collected at the "Fields" section of the struct
# if set to "inline", documentation of struct fields will go right above struct definition
struct_field_comment_style = "outofline"

# if set to "outofline", documentation of enumerators will be collected at the "Enumerators" section of the enum
enumerator_comment_style = "outofline"

[codegen]
use_julia_bool = true
always_NUL_terminated_string = true
is_function_strictly_typed = false
opaque_func_arg_as_PtrCvoid = false
opaque_as_mutable_struct = true

[codegen.macro]
macro_mode = "basic"
add_comment_for_skipped_macro = false
